"use strict";(self.webpackChunkneural_log_docs=self.webpackChunkneural_log_docs||[]).push([[3474],{1266:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"components/python-sdk","title":"Python SDK","description":"The Python SDK for NeuralLog provides a client library for interacting with the NeuralLog server from Python applications. It offers a simple, intuitive API for logging messages at different levels.","source":"@site/docs/components/python-sdk.md","sourceDirName":"components","slug":"/components/python-sdk","permalink":"/docs/docs/components/python-sdk","draft":false,"unlisted":false,"editUrl":"https://github.com/NeuralLog/docs/tree/main/docs/components/python-sdk.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"C# SDK","permalink":"/docs/docs/components/csharp-sdk"}}');var t=o(4848),a=o(8453);const i={},s="Python SDK",l={},c=[{value:"Requirements",id:"requirements",level:2},{value:"Installation",id:"installation",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Configuration Options",id:"configuration-options",level:2},{value:"Framework Adapters",id:"framework-adapters",level:2},{value:"Standard Logging",id:"standard-logging",level:3},{value:"Loguru",id:"loguru",level:3},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Context Data",id:"context-data",level:3},{value:"Batching",id:"batching",level:3},{value:"Flushing",id:"flushing",level:3},{value:"Additional Resources",id:"additional-resources",level:2}];function g(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"python-sdk",children:"Python SDK"})}),"\n",(0,t.jsx)(n.p,{children:"The Python SDK for NeuralLog provides a client library for interacting with the NeuralLog server from Python applications. It offers a simple, intuitive API for logging messages at different levels."}),"\n",(0,t.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Python"}),": Version 3.8 or later"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Dependencies"}),": requests library"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"pip install neurallog-sdk\n"})}),"\n",(0,t.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,t.jsx)(n.p,{children:"The Python SDK provides a simple API for logging messages to the NeuralLog server:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from neurallog_sdk import NeuralLog, NeuralLogConfig\n\n# Configure the SDK (optional)\nconfig = NeuralLogConfig(\n    server_url="http://localhost:3030",\n    namespace="default"\n)\nNeuralLog.configure(config)\n\n# Get a logger\nlogger = NeuralLog.get_logger("my-application")\n\n# Log a simple message\nlogger.info("Hello, world!")\n\n# Log with structured data\ndata = {\n    "user": "john.doe",\n    "action": "login",\n    "ip": "192.168.1.1"\n}\nlogger.info("User logged in", data=data)\n\n# Log an error with exception\ntry:\n    # Some code that might throw an exception\n    raise Exception("Something went wrong")\nexcept Exception as e:\n    logger.error("Failed to process request", exception=e)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"configuration-options",children:"Configuration Options"}),"\n",(0,t.jsx)(n.p,{children:"The Python SDK supports various configuration options:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'config = NeuralLogConfig(\n    # Required settings\n    server_url="https://logs.example.com",\n    namespace="production",\n    \n    # Optional settings\n    api_key="your-api-key",\n    batch_size=100,\n    batch_interval_ms=5000,\n    max_retries=3,\n    retry_backoff_ms=1000,\n    async_enabled=True,\n    debug_enabled=False,\n    \n    # HTTP client settings\n    timeout_ms=30000,\n    max_connections=10,\n    \n    # Custom HTTP headers\n    headers={\n        "X-Custom-Header": "value"\n    }\n)\n\nNeuralLog.configure(config)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"framework-adapters",children:"Framework Adapters"}),"\n",(0,t.jsx)(n.p,{children:"The Python SDK provides adapters for popular Python logging frameworks, allowing you to integrate NeuralLog into existing applications with minimal changes."}),"\n",(0,t.jsx)(n.h3,{id:"standard-logging",children:"Standard Logging"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import logging\nfrom neurallog_sdk.adapters import NeuralLogHandler\n\n# Configure the standard logging handler\nlogger = logging.getLogger("my-application")\nhandler = NeuralLogHandler(\n    log_name="my-application",\n    server_url="http://localhost:3030",\n    namespace="default"\n)\nlogger.addHandler(handler)\nlogger.setLevel(logging.INFO)\n\n# Usage\nlogger.info("Hello, world!")\n\n# With structured data\nlogger.info("User logged in", extra={\n    "data": {\n        "user": "john.doe",\n        "action": "login"\n    }\n})\n\n# With exception\ntry:\n    # Some code that might throw an exception\n    raise Exception("Something went wrong")\nexcept Exception as e:\n    logger.exception("Failed to process request")\n'})}),"\n",(0,t.jsx)(n.h3,{id:"loguru",children:"Loguru"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from loguru import logger\nfrom neurallog_sdk.adapters import NeuralLogSink\n\n# Configure the Loguru sink\nlogger.configure(handlers=[\n    {\n        "sink": NeuralLogSink(\n            log_name="my-application",\n            server_url="http://localhost:3030",\n            namespace="default"\n        ),\n        "level": "INFO"\n    }\n])\n\n# Usage\nlogger.info("Hello, world!")\n\n# With structured data\nlogger.info("User logged in", user="john.doe", action="login")\n\n# With exception\ntry:\n    # Some code that might throw an exception\n    raise Exception("Something went wrong")\nexcept Exception as e:\n    logger.exception("Failed to process request")\n'})}),"\n",(0,t.jsx)(n.h2,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,t.jsx)(n.h3,{id:"context-data",children:"Context Data"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Set global context data for all loggers\nNeuralLog.set_global_context({\n    "application": "my-application",\n    "environment": "production",\n    "version": "1.0.0"\n})\n\n# Set logger-specific context data\nlogger.set_context({\n    "service": "user-service",\n    "instance": "user-service-1"\n})\n'})}),"\n",(0,t.jsx)(n.h3,{id:"batching",children:"Batching"}),"\n",(0,t.jsx)(n.p,{children:"The SDK supports batching of log messages to improve performance:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'config = NeuralLogConfig(\n    server_url="http://localhost:3030",\n    namespace="default",\n    async_enabled=True,\n    batch_size=100,\n    batch_interval_ms=5000\n)\nNeuralLog.configure(config)\n'})}),"\n",(0,t.jsx)(n.p,{children:"With batching enabled, log messages are queued and sent in batches when:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The batch size is reached"}),"\n",(0,t.jsx)(n.li,{children:"The batch interval elapses"}),"\n",(0,t.jsxs)(n.li,{children:["The ",(0,t.jsx)(n.code,{children:"flush"})," method is called"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"flushing",children:"Flushing"}),"\n",(0,t.jsx)(n.p,{children:"To ensure all pending log messages are sent, you can flush the logger:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# Flush a specific logger\nlogger.flush()\n\n# Flush all loggers\nNeuralLog.flush_all()\n"})}),"\n",(0,t.jsx)(n.h2,{id:"additional-resources",children:"Additional Resources"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/NeuralLog/python-sdk",children:"GitHub Repository"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://docs.neurallog.com/api/python",children:"API Documentation"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/NeuralLog/python-sdk-examples",children:"Sample Applications"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://pypi.org/project/neurallog-sdk/",children:"PyPI Package"})}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(g,{...e})}):g(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>s});var r=o(6540);const t={},a=r.createContext(t);function i(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);