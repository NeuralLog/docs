"use strict";(self.webpackChunkneural_log_docs=self.webpackChunkneural_log_docs||[]).push([[9237],{2051:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>i,contentTitle:()=>g,default:()=>u,frontMatter:()=>l,metadata:()=>r,toc:()=>s});const r=JSON.parse('{"id":"sdk/go","title":"Go SDK","description":"The NeuralLog Go SDK provides a simple way to integrate NeuralLog into your Go applications. It allows you to send logs to NeuralLog with minimal configuration and provides adapters for popular Go logging libraries.","source":"@site/docs/sdk/go.md","sourceDirName":"sdk","slug":"/sdk/go","permalink":"/docs/docs/sdk/go","draft":false,"unlisted":false,"editUrl":"https://github.com/NeuralLog/docs/tree/main/docs/sdk/go.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"SDK Documentation","permalink":"/docs/docs/sdk/"},"next":{"title":"Java 22 Compatibility","permalink":"/docs/docs/development/java-22-compatibility"}}');var a=o(4848),t=o(8453);const l={sidebar_position:3},g="Go SDK",i={},s=[{value:"Installation",id:"installation",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Configuration Options",id:"configuration-options",level:2},{value:"Adapters for Popular Go Logging Libraries",id:"adapters-for-popular-go-logging-libraries",level:2},{value:"Standard Go Log Adapter",id:"standard-go-log-adapter",level:3},{value:"Logrus Adapter",id:"logrus-adapter",level:3},{value:"Zap Adapter",id:"zap-adapter",level:3},{value:"Source Code",id:"source-code",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"go-sdk",children:"Go SDK"})}),"\n",(0,a.jsx)(n.p,{children:"The NeuralLog Go SDK provides a simple way to integrate NeuralLog into your Go applications. It allows you to send logs to NeuralLog with minimal configuration and provides adapters for popular Go logging libraries."}),"\n",(0,a.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"go get github.com/NeuralLog/go-sdk\n"})}),"\n",(0,a.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "github.com/NeuralLog/go-sdk/neurallog"\n    "github.com/NeuralLog/go-sdk/neurallog/models"\n)\n\nfunc main() {\n    // Configure NeuralLog (optional)\n    neurallog.Configure(\n        neurallog.WithServerURL("https://logs.example.com"),\n        neurallog.WithAPIKey("your-api-key"),\n        neurallog.WithNamespace("production"),\n    )\n\n    // Get a logger\n    logger := neurallog.GetLogger("my-log")\n\n    // Log messages\n    logger.Debug("Debug message")\n    logger.Info("Info message")\n    logger.Warning("Warning message")\n    logger.Error("Error message")\n    logger.Fatal("Fatal message")\n\n    // Log with structured data\n    logger.Info("User logged in", neurallog.WithData(map[string]interface{}{\n        "user_id": 123,\n        "username": "john.doe",\n    }))\n\n    // Log with exception\n    err := someFunction()\n    if err != nil {\n        logger.Error("Failed to do something", neurallog.WithException(err))\n    }\n\n    // Set context for all future logs from this logger\n    logger.SetContext(map[string]interface{}{\n        "app": "my-app",\n        "environment": "production",\n    })\n\n    // Set global context for all loggers\n    neurallog.SetGlobalContext(map[string]interface{}{\n        "app": "my-app",\n        "environment": "production",\n    })\n\n    // Flush any pending logs\n    neurallog.FlushAll()\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"configuration-options",children:"Configuration Options"}),"\n",(0,a.jsx)(n.p,{children:"The NeuralLog SDK can be configured with the following options:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'neurallog.Configure(\n    // Server URL (default: http://localhost:3030)\n    neurallog.WithServerURL("https://logs.example.com"),\n    \n    // Namespace (default: default)\n    neurallog.WithNamespace("production"),\n    \n    // API key\n    neurallog.WithAPIKey("your-api-key"),\n    \n    // Enable/disable async logging (default: true)\n    neurallog.WithAsyncEnabled(true),\n    \n    // Batch size for async logging (default: 100)\n    neurallog.WithBatchSize(100),\n    \n    // Batch interval for async logging (default: 5s)\n    neurallog.WithBatchInterval(models.WithBatchInterval(5 * time.Second)),\n    \n    // Maximum number of retries (default: 3)\n    neurallog.WithMaxRetries(3),\n    \n    // Retry backoff duration (default: 1s)\n    neurallog.WithRetryBackoff(models.WithRetryBackoff(time.Second)),\n    \n    // Enable/disable debug logging (default: false)\n    neurallog.WithDebugEnabled(false),\n    \n    // HTTP timeout (default: 30s)\n    neurallog.WithTimeout(models.WithTimeout(30 * time.Second)),\n    \n    // Maximum number of HTTP connections (default: 10)\n    neurallog.WithMaxConnections(10),\n    \n    // Custom HTTP headers\n    neurallog.WithHeaders(map[string]string{\n        "X-Custom-Header": "value",\n    }),\n)\n'})}),"\n",(0,a.jsx)(n.h2,{id:"adapters-for-popular-go-logging-libraries",children:"Adapters for Popular Go Logging Libraries"}),"\n",(0,a.jsx)(n.h3,{id:"standard-go-log-adapter",children:"Standard Go Log Adapter"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "log"\n    "os"\n\n    "github.com/NeuralLog/go-sdk/neurallog/adapters"\n    "github.com/NeuralLog/go-sdk/neurallog/models"\n)\n\nfunc main() {\n    // Create a standard logger\n    stdLogger := log.New(os.Stdout, "INFO: ", log.Ldate|log.Ltime)\n\n    // Create the adapter\n    adapter := adapters.NewStdLogAdapter("my-log", stdLogger,\n        adapters.WithLevel(models.LogLevelInfo),\n        adapters.WithContext(map[string]interface{}{\n            "app": "my-app",\n        }),\n    )\n\n    // Use the adapter\n    adapter.Print("Hello, world!")\n    adapter.Printf("Hello, %s!", "world")\n    adapter.Println("Hello, world!")\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"logrus-adapter",children:"Logrus Adapter"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "github.com/NeuralLog/go-sdk/neurallog/adapters"\n    "github.com/sirupsen/logrus"\n)\n\nfunc main() {\n    // Create a logrus logger\n    logger := logrus.New()\n    logger.SetLevel(logrus.DebugLevel)\n\n    // Create the hook\n    hook := adapters.NewLogrusHook("my-log",\n        adapters.WithLogrusContext(map[string]interface{}{\n            "app": "my-app",\n        }),\n    )\n\n    // Add the hook to the logger\n    logger.AddHook(hook)\n\n    // Use logrus as usual\n    logger.Debug("Debug message")\n    logger.Info("Info message")\n    logger.Warn("Warning message")\n    logger.Error("Error message")\n\n    // Log with fields\n    logger.WithFields(logrus.Fields{\n        "user": "john.doe",\n        "action": "login",\n    }).Info("User logged in")\n\n    // Log with error\n    err := someFunction()\n    logger.WithError(err).Error("Failed to do something")\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"zap-adapter",children:"Zap Adapter"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "github.com/NeuralLog/go-sdk/neurallog/adapters"\n    "go.uber.org/zap"\n    "go.uber.org/zap/zapcore"\n)\n\nfunc main() {\n    // Create a zap core\n    core := adapters.NewZapCore("my-log", zapcore.DebugLevel,\n        adapters.WithZapContext(map[string]interface{}{\n            "app": "my-app",\n        }),\n    )\n\n    // Create a zap logger with the core\n    logger := zap.New(core)\n\n    // Use zap as usual\n    logger.Debug("Debug message")\n    logger.Info("Info message")\n    logger.Warn("Warning message")\n    logger.Error("Error message")\n\n    // Log with fields\n    logger.Info("User logged in",\n        zap.String("user", "john.doe"),\n        zap.String("action", "login"),\n    )\n\n    // Log with error\n    err := someFunction()\n    logger.Error("Failed to do something", zap.Error(err))\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"source-code",children:"Source Code"}),"\n",(0,a.jsx)(n.p,{children:"The source code for the NeuralLog Go SDK is available on GitHub:"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://github.com/NeuralLog/go-sdk",children:"https://github.com/NeuralLog/go-sdk"})})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>l,x:()=>g});var r=o(6540);const a={},t=r.createContext(a);function l(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function g(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);