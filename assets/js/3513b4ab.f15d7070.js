"use strict";(self.webpackChunkneural_log_docs=self.webpackChunkneural_log_docs||[]).push([[1980],{8453:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>s});var t=o(6540);const a={},r=t.createContext(a);function i(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(r.Provider,{value:n},e.children)}},8884:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"components/csharp-sdk","title":"C# SDK","description":"SDK","source":"@site/docs/components/csharp-sdk.md","sourceDirName":"components","slug":"/components/csharp-sdk","permalink":"/docs/docs/components/csharp-sdk","draft":false,"unlisted":false,"editUrl":"https://github.com/NeuralLog/docs/tree/main/docs/components/csharp-sdk.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Java SDK","permalink":"/docs/docs/components/java-sdk"},"next":{"title":"Python SDK","permalink":"/docs/docs/components/python-sdk"}}');var a=o(4848),r=o(8453);const i={},s="C# SDK",l={},c=[{value:"Requirements",id:"requirements",level:2},{value:"Installation",id:"installation",level:2},{value:"NuGet Package Manager",id:"nuget-package-manager",level:3},{value:".NET CLI",id:"net-cli",level:3},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Configuration Options",id:"configuration-options",level:2},{value:"Framework Adapters",id:"framework-adapters",level:2},{value:"Microsoft.Extensions.Logging",id:"microsoftextensionslogging",level:3},{value:"Serilog",id:"serilog",level:3},{value:"NLog",id:"nlog",level:3},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Context Data",id:"context-data",level:3},{value:"Batching",id:"batching",level:3},{value:"Flushing",id:"flushing",level:3},{value:"NuGet Packaging",id:"nuget-packaging",level:2},{value:"Setting Up NuGet API Key",id:"setting-up-nuget-api-key",level:3},{value:"Additional Resources",id:"additional-resources",level:2}];function g(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"c-sdk",children:"C# SDK"})}),"\n",(0,a.jsx)(n.p,{children:"The C# SDK for NeuralLog provides a client library for interacting with the NeuralLog server from C# applications. It offers a familiar logging API similar to popular .NET logging frameworks."}),"\n",(0,a.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Framework"}),": .NET 9.0 or later"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,a.jsx)(n.h3,{id:"nuget-package-manager",children:"NuGet Package Manager"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"Install-Package NeuralLog.SDK\n"})}),"\n",(0,a.jsx)(n.h3,{id:"net-cli",children:".NET CLI"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"dotnet add package NeuralLog.SDK\n"})}),"\n",(0,a.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,a.jsx)(n.p,{children:"The C# SDK provides a simple API for logging messages to the NeuralLog server:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'using NeuralLog.SDK;\nusing System.Collections.Generic;\n\n// Configure the SDK (optional)\nvar config = new NeuralLogConfig\n{\n    ServerUrl = "http://localhost:3030",\n    Namespace = "default"\n};\nNeuralLog.Configure(config);\n\n// Get a logger\nvar logger = NeuralLog.GetLogger("my-application");\n\n// Log a simple message\nlogger.Info("Hello, world!");\n\n// Log with structured data\nvar data = new Dictionary<string, object>\n{\n    ["user"] = "john.doe",\n    ["action"] = "login",\n    ["ip"] = "192.168.1.1"\n};\nlogger.Info("User logged in", data);\n\n// Log an error with exception\ntry\n{\n    // Some code that might throw an exception\n    throw new System.Exception("Something went wrong");\n}\ncatch (System.Exception ex)\n{\n    logger.Error("Failed to process request", ex);\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"configuration-options",children:"Configuration Options"}),"\n",(0,a.jsx)(n.p,{children:"The C# SDK supports various configuration options:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'var config = new NeuralLogConfig\n{\n    // Required settings\n    ServerUrl = "https://logs.example.com",\n    Namespace = "production",\n\n    // Optional settings\n    ApiKey = "your-api-key",\n    BatchSize = 100,\n    BatchIntervalMs = 5000,\n    MaxRetries = 3,\n    RetryBackoffMs = 1000,\n    AsyncEnabled = true,\n    DebugEnabled = false,\n\n    // HTTP client settings\n    Timeout = TimeSpan.FromSeconds(30),\n    MaxConnections = 10,\n\n    // Custom HTTP headers\n    Headers = new Dictionary<string, string>\n    {\n        ["X-Custom-Header"] = "value"\n    }\n};\n\nNeuralLog.Configure(config);\n'})}),"\n",(0,a.jsx)(n.h2,{id:"framework-adapters",children:"Framework Adapters"}),"\n",(0,a.jsx)(n.p,{children:"The C# SDK provides adapters for popular .NET logging frameworks, allowing you to integrate NeuralLog into existing applications with minimal changes."}),"\n",(0,a.jsx)(n.h3,{id:"microsoftextensionslogging",children:"Microsoft.Extensions.Logging"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'using Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing NeuralLog.SDK.Extensions;\n\n// In Startup.cs or Program.cs\nservices.AddLogging(builder =>\n{\n    builder.AddNeuralLog(options =>\n    {\n        options.ServerUrl = "http://localhost:3030";\n        options.Namespace = "default";\n        options.LogName = "my-application";\n    });\n});\n\n// Usage in a class\npublic class MyService\n{\n    private readonly ILogger<MyService> _logger;\n\n    public MyService(ILogger<MyService> logger)\n    {\n        _logger = logger;\n    }\n\n    public void DoSomething()\n    {\n        _logger.LogInformation("Doing something");\n\n        try\n        {\n            // Some code that might throw an exception\n            throw new System.Exception("Something went wrong");\n        }\n        catch (System.Exception ex)\n        {\n            _logger.LogError(ex, "Failed to do something");\n        }\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"serilog",children:"Serilog"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'using Serilog;\nusing NeuralLog.SDK.Serilog;\n\n// Configure Serilog\nLog.Logger = new LoggerConfiguration()\n    .WriteTo.NeuralLog(\n        serverUrl: "http://localhost:3030",\n        namespace: "default",\n        logName: "my-application"\n    )\n    .CreateLogger();\n\n// Usage\nLog.Information("Hello, world!");\n\n// With structured data\nLog.Information("User {User} logged in from {IP}", "john.doe", "192.168.1.1");\n\n// With exception\ntry\n{\n    // Some code that might throw an exception\n    throw new System.Exception("Something went wrong");\n}\ncatch (System.Exception ex)\n{\n    Log.Error(ex, "Failed to process request");\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"nlog",children:"NLog"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'using NLog;\nusing NLog.Config;\nusing NLog.Targets;\nusing NeuralLog.SDK.NLog;\n\n// Configure NLog programmatically\nvar config = new LoggingConfiguration();\nvar neuralLogTarget = new NeuralLogTarget\n{\n    Name = "neurallog",\n    ServerUrl = "http://localhost:3030",\n    Namespace = "default",\n    LogName = "my-application"\n};\nconfig.AddTarget(neuralLogTarget);\nconfig.AddRule(LogLevel.Info, LogLevel.Fatal, neuralLogTarget);\nLogManager.Configuration = config;\n\n// Usage\nvar logger = LogManager.GetCurrentClassLogger();\nlogger.Info("Hello, world!");\n\n// With structured data\nlogger.Info("User {User} logged in from {IP}", "john.doe", "192.168.1.1");\n\n// With exception\ntry\n{\n    // Some code that might throw an exception\n    throw new System.Exception("Something went wrong");\n}\ncatch (System.Exception ex)\n{\n    logger.Error(ex, "Failed to process request");\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,a.jsx)(n.h3,{id:"context-data",children:"Context Data"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'// Set global context data for all loggers\nNeuralLog.SetGlobalContext(new Dictionary<string, object>\n{\n    ["application"] = "my-application",\n    ["environment"] = "production",\n    ["version"] = "1.0.0"\n});\n\n// Set logger-specific context data\nlogger.SetContext(new Dictionary<string, object>\n{\n    ["service"] = "user-service",\n    ["instance"] = "user-service-1"\n});\n'})}),"\n",(0,a.jsx)(n.h3,{id:"batching",children:"Batching"}),"\n",(0,a.jsx)(n.p,{children:"The SDK supports batching of log messages to improve performance:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'var config = new NeuralLogConfig\n{\n    ServerUrl = "http://localhost:3030",\n    Namespace = "default",\n    AsyncEnabled = true,\n    BatchSize = 100,\n    BatchIntervalMs = 5000\n};\nNeuralLog.Configure(config);\n'})}),"\n",(0,a.jsx)(n.p,{children:"With batching enabled, log messages are queued and sent in batches when:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"The batch size is reached"}),"\n",(0,a.jsx)(n.li,{children:"The batch interval elapses"}),"\n",(0,a.jsxs)(n.li,{children:["The ",(0,a.jsx)(n.code,{children:"Flush"})," method is called"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"flushing",children:"Flushing"}),"\n",(0,a.jsx)(n.p,{children:"To ensure all pending log messages are sent, you can flush the logger:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"// Flush a specific logger\nawait logger.Flush();\n\n// Flush all loggers\nawait NeuralLog.FlushAll();\n"})}),"\n",(0,a.jsx)(n.h2,{id:"nuget-packaging",children:"NuGet Packaging"}),"\n",(0,a.jsx)(n.p,{children:"The C# SDK is set up for automatic NuGet package publishing using GitHub Actions. When a new release is created on GitHub, a workflow automatically builds, tests, and publishes the NuGet package to the NuGet Gallery."}),"\n",(0,a.jsx)(n.h3,{id:"setting-up-nuget-api-key",children:"Setting Up NuGet API Key"}),"\n",(0,a.jsx)(n.p,{children:"To enable automatic NuGet package publishing, you need to add a NuGet API key as a secret in the GitHub repository settings:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["Generate a NuGet API key from ",(0,a.jsx)(n.a,{href:"https://www.nuget.org/",children:"nuget.org"})]}),"\n",(0,a.jsxs)(n.li,{children:["Go to the GitHub repository settings at ",(0,a.jsx)(n.a,{href:"https://github.com/NeuralLog/csharp-sdk/settings/secrets/actions",children:"https://github.com/NeuralLog/csharp-sdk/settings/secrets/actions"})]}),"\n",(0,a.jsxs)(n.li,{children:["Add a new repository secret with the name ",(0,a.jsx)(n.code,{children:"NUGET_API_KEY"})]}),"\n",(0,a.jsx)(n.li,{children:"Paste your NuGet API key as the value"}),"\n",(0,a.jsx)(n.li,{children:'Click "Add secret"'}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Once the API key is set up, the GitHub Actions workflow will be able to publish the NuGet package automatically when a new release is created."}),"\n",(0,a.jsx)(n.h2,{id:"additional-resources",children:"Additional Resources"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/NeuralLog/csharp-sdk",children:"GitHub Repository"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://docs.neurallog.com/api/csharp",children:"API Documentation"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/NeuralLog/csharp-sdk-examples",children:"Sample Applications"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://www.nuget.org/packages/NeuralLog.SDK",children:"NuGet Package"})}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(g,{...e})}):g(e)}}}]);