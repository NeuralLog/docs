"use strict";(self.webpackChunkneural_log_docs=self.webpackChunkneural_log_docs||[]).push([[7411],{8453:(e,n,o)=>{o.d(n,{R:()=>a,x:()=>t});var r=o(6540);const i={},s=r.createContext(i);function a(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:n},e.children)}},9984:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>t,default:()=>d,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"sdk/csharp","title":"C# SDK","description":"SDK","source":"@site/docs/sdk/csharp.md","sourceDirName":"sdk","slug":"/sdk/csharp","permalink":"/docs/docs/sdk/csharp","draft":false,"unlisted":false,"editUrl":"https://github.com/NeuralLog/docs/tree/main/docs/sdk/csharp.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Java SDK","permalink":"/docs/docs/sdk/java"},"next":{"title":"Python SDK","permalink":"/docs/docs/sdk/python"}}');var i=o(4848),s=o(8453);const a={sidebar_position:4},t="C# SDK",l={},c=[{value:"Requirements",id:"requirements",level:2},{value:"Installation",id:"installation",level:2},{value:"NuGet Package Manager",id:"nuget-package-manager",level:3},{value:".NET CLI",id:"net-cli",level:3},{value:"Package Reference",id:"package-reference",level:3},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Framework Adapters",id:"framework-adapters",level:2},{value:"Microsoft.Extensions.Logging",id:"microsoftextensionslogging",level:3},{value:"Serilog",id:"serilog",level:3},{value:"NLog",id:"nlog",level:3},{value:"Configuration Options",id:"configuration-options",level:2},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Context Data",id:"context-data",level:3},{value:"Batching",id:"batching",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Connection Errors",id:"connection-errors",level:4},{value:"Authentication Errors",id:"authentication-errors",level:4},{value:"Source Code",id:"source-code",level:2}];function g(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"c-sdk",children:"C# SDK"})}),"\n",(0,i.jsx)(n.p,{children:"The NeuralLog C# SDK provides a client library for interacting with the NeuralLog server from .NET applications. It offers a familiar logging API and adapters for popular .NET logging frameworks."}),"\n",(0,i.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:".NET"}),": .NET 6.0 or later"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"NuGet"}),": For package installation"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,i.jsx)(n.h3,{id:"nuget-package-manager",children:"NuGet Package Manager"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Install-Package NeuralLog.SDK\n"})}),"\n",(0,i.jsx)(n.h3,{id:"net-cli",children:".NET CLI"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"dotnet add package NeuralLog.SDK\n"})}),"\n",(0,i.jsx)(n.h3,{id:"package-reference",children:"Package Reference"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<PackageReference Include="NeuralLog.SDK" Version="1.0.0" />\n'})}),"\n",(0,i.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,i.jsx)(n.p,{children:"The C# SDK provides a simple API for logging messages to the NeuralLog server:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'using NeuralLog.SDK;\nusing NeuralLog.SDK.Models;\n\n// Configure the SDK (optional)\nNeuralLog.Configure(options => {\n    options.ServerUrl = "http://localhost:3030";\n    options.Namespace = "default";\n});\n\n// Get a logger\nvar logger = NeuralLog.GetLogger("my-application");\n\n// Log a simple message\nlogger.Info("Hello, world!");\n\n// Log with structured data\nvar data = new Dictionary<string, object> {\n    { "user", "john.doe" },\n    { "action", "login" },\n    { "ip", "192.168.1.1" }\n};\nlogger.Info("User logged in", data);\n\n// Log an error with exception\ntry {\n    // Some code that might throw an exception\n    throw new Exception("Something went wrong");\n}\ncatch (Exception ex) {\n    logger.Error("Failed to process request", ex);\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"framework-adapters",children:"Framework Adapters"}),"\n",(0,i.jsx)(n.p,{children:"The C# SDK provides adapters for popular .NET logging frameworks, allowing you to integrate NeuralLog into existing applications with minimal changes."}),"\n",(0,i.jsx)(n.h3,{id:"microsoftextensionslogging",children:"Microsoft.Extensions.Logging"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'using Microsoft.Extensions.Logging;\nusing NeuralLog.SDK.Extensions.Logging;\n\n// In Startup.cs or Program.cs\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddLogging(builder => {\n        builder.AddNeuralLog(options => {\n            options.LogName = "my-application";\n            options.ServerUrl = "http://localhost:3030";\n        });\n    });\n}\n\n// In a class using dependency injection\npublic class MyService\n{\n    private readonly ILogger<MyService> _logger;\n\n    public MyService(ILogger<MyService> logger)\n    {\n        _logger = logger;\n    }\n\n    public void DoSomething()\n    {\n        _logger.LogInformation("This will be sent to NeuralLog");\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"serilog",children:"Serilog"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'using Serilog;\nusing NeuralLog.SDK.Serilog;\n\n// Configure Serilog\nLog.Logger = new LoggerConfiguration()\n    .WriteTo.NeuralLog("my-application")\n    .CreateLogger();\n\n// Use the logger\nLog.Information("This will be sent to NeuralLog");\n\n// With structured data\nLog.Information("User {User} logged in from {IP}", "john.doe", "192.168.1.1");\n\n// With exception\ntry {\n    throw new Exception("Something went wrong");\n}\ncatch (Exception ex) {\n    Log.Error(ex, "Failed to process request");\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"nlog",children:"NLog"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'using NLog;\nusing NeuralLog.SDK.NLog;\n\n// In NLog.config\n<nlog>\n  <extensions>\n    <add assembly="NeuralLog.SDK.NLog"/>\n  </extensions>\n  <targets>\n    <target name="neurallog" type="NeuralLog" logName="my-application" />\n  </targets>\n  <rules>\n    <logger name="*" minlevel="Info" writeTo="neurallog" />\n  </rules>\n</nlog>\n\n// In code\nprivate static readonly Logger Logger = LogManager.GetCurrentClassLogger();\n\npublic void DoSomething()\n{\n    Logger.Info("This will be sent to NeuralLog");\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"configuration-options",children:"Configuration Options"}),"\n",(0,i.jsxs)(n.p,{children:["The C# SDK can be configured using the ",(0,i.jsx)(n.code,{children:"Configure"})," method:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'NeuralLog.Configure(options => {\n    options.ServerUrl = "https://logs.example.com";\n    options.Namespace = "production";\n    options.ApiKey = "your-api-key";\n    options.BatchSize = 100;\n    options.BatchIntervalMs = 5000;\n    options.MaxRetries = 3;\n    options.RetryBackoffMs = 1000;\n    options.AsyncEnabled = true;\n    options.DebugEnabled = false;\n});\n'})}),"\n",(0,i.jsx)(n.h2,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,i.jsx)(n.h3,{id:"context-data",children:"Context Data"}),"\n",(0,i.jsx)(n.p,{children:"You can add context data that will be included with all log entries:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'// Set global context for all loggers\nNeuralLog.SetGlobalContext(new Dictionary<string, object> {\n    { "application", "my-app" },\n    { "environment", "production" },\n    { "version", "1.0.0" }\n});\n\n// Set context for a specific logger\nvar logger = NeuralLog.GetLogger("my-component");\nlogger.SetContext(new Dictionary<string, object> {\n    { "component", "authentication" }\n});\n'})}),"\n",(0,i.jsx)(n.h3,{id:"batching",children:"Batching"}),"\n",(0,i.jsx)(n.p,{children:"The SDK supports batching log entries for improved performance:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"NeuralLog.Configure(options => {\n    options.AsyncEnabled = true;\n    options.BatchSize = 100;\n    options.BatchIntervalMs = 5000;\n});\n"})}),"\n",(0,i.jsx)(n.p,{children:"When batching is enabled, log entries are queued and sent in batches. You can manually flush the queue:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"// Flush all loggers\nNeuralLog.FlushAll();\n\n// Flush a specific logger\nlogger.Flush();\n"})}),"\n",(0,i.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,i.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,i.jsx)(n.h4,{id:"connection-errors",children:"Connection Errors"}),"\n",(0,i.jsx)(n.p,{children:"If you're experiencing connection errors to the NeuralLog server:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"NeuralLog.SDK.Exceptions.NeuralLogConnectionException: Failed to connect to server\n"})}),"\n",(0,i.jsx)(n.p,{children:"Check that:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The server URL is correct"}),"\n",(0,i.jsx)(n.li,{children:"The server is running and accessible"}),"\n",(0,i.jsx)(n.li,{children:"Your network allows the connection"}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"authentication-errors",children:"Authentication Errors"}),"\n",(0,i.jsx)(n.p,{children:"If you're seeing authentication errors:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"NeuralLog.SDK.Exceptions.NeuralLogAuthException: Invalid API key\n"})}),"\n",(0,i.jsx)(n.p,{children:"Verify that:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"You've set the correct API key"}),"\n",(0,i.jsx)(n.li,{children:"The API key has the necessary permissions"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"source-code",children:"Source Code"}),"\n",(0,i.jsxs)(n.p,{children:["The source code for the NeuralLog C# SDK is available on GitHub:\n",(0,i.jsx)(n.a,{href:"https://github.com/NeuralLog/csharp-sdk",children:"https://github.com/NeuralLog/csharp-sdk"})]})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(g,{...e})}):g(e)}}}]);