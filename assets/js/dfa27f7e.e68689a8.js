"use strict";(self.webpackChunkneural_log_docs=self.webpackChunkneural_log_docs||[]).push([[7359],{2962:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>t,contentTitle:()=>a,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>g});const o=JSON.parse('{"id":"components/sdk","title":"TypeScript SDK","description":"The TypeScript SDK (@neurallog/sdk) provides a client library for interacting with the NeuralLog server from TypeScript and JavaScript applications. It uses the shared types from the @neurallog/shared package for consistency across the codebase.","source":"@site/docs/components/sdk.md","sourceDirName":"components","slug":"/components/sdk","permalink":"/docs/docs/components/sdk","draft":false,"unlisted":false,"editUrl":"https://github.com/NeuralLog/docs/tree/main/docs/components/sdk.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4}}');var s=r(4848),l=r(8453);const i={sidebar_position:4},a="TypeScript SDK",t={},g=[{value:"Overview",id:"overview",level:2},{value:"Installation",id:"installation",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Adapters",id:"adapters",level:2},{value:"Console Adapter",id:"console-adapter",level:3},{value:"Bunyan Adapter",id:"bunyan-adapter",level:3},{value:"Pino Adapter",id:"pino-adapter",level:3},{value:"Winston Adapter",id:"winston-adapter",level:3},{value:"Loglevel Adapter",id:"loglevel-adapter",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"NeuralLog",id:"neurallog",level:3},{value:"Static Methods",id:"static-methods",level:4},{value:"Logger",id:"logger",level:3},{value:"Methods",id:"methods",level:4},{value:"Shared Types",id:"shared-types",level:3},{value:"Publishing the SDK",id:"publishing-the-sdk",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"typescript-sdk",children:"TypeScript SDK"})}),"\n",(0,s.jsxs)(n.p,{children:["The TypeScript SDK (",(0,s.jsx)(n.code,{children:"@neurallog/sdk"}),") provides a client library for interacting with the NeuralLog server from TypeScript and JavaScript applications. It uses the shared types from the ",(0,s.jsx)(n.code,{children:"@neurallog/shared"})," package for consistency across the codebase."]}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"The SDK provides:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"A simple API for logging messages at different levels"}),"\n",(0,s.jsx)(n.li,{children:"Methods for retrieving and searching logs"}),"\n",(0,s.jsx)(n.li,{children:"Adapters for popular logging libraries (Console, Bunyan, Pino, Winston, Loglevel)"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Configure npm to use the private registry for @neurallog scope\nnpm config set @neurallog:registry http://localhost:4873\n\n# Install the SDK\nnpm install @neurallog/sdk --registry http://localhost:4873\n"})}),"\n",(0,s.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { NeuralLog, LogLevel } from '@neurallog/sdk';\n\n// Create a logger\nconst logger = NeuralLog.Log('my-app');\n\n// Log messages at different levels\nlogger.debug('Debug message');\nlogger.info('Info message');\nlogger.warn('Warning message');\nlogger.error('Error message', { error: 'Error details' });\nlogger.fatal('Fatal message');\n\n// Get log entries\nconst entries = await logger.get();\nconsole.log(entries);\n\n// Search logs\nconst results = await logger.search({\n  query: 'error',\n  startTime: '2023-01-01T00:00:00.000Z',\n  endTime: '2023-12-31T23:59:59.999Z',\n  fieldFilters: { level: 'error' },\n  limit: 10\n});\nconsole.log(results);\n\n// Clear the log\nawait logger.clear();\n"})}),"\n",(0,s.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsx)(n.p,{children:"You can configure the SDK globally:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { NeuralLog } from '@neurallog/sdk';\n\n// Configure global options\nNeuralLog.configure({\n  serverUrl: 'http://logs-server:3030',\n  defaultNamespace: 'production'\n});\n"})}),"\n",(0,s.jsx)(n.p,{children:"Or per logger:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { NeuralLog, LogLevel } from '@neurallog/sdk';\n\n// Create a logger with custom options\nconst logger = NeuralLog.Log('my-app', {\n  defaultLevel: LogLevel.INFO,\n  includeTimestamps: true\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"adapters",children:"Adapters"}),"\n",(0,s.jsx)(n.p,{children:"The SDK provides adapters for popular logging libraries:"}),"\n",(0,s.jsx)(n.h3,{id:"console-adapter",children:"Console Adapter"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { ConsoleAdapter } from '@neurallog/sdk/adapters';\n\n// Create adapter\nconst logger = new ConsoleAdapter({\n  logName: 'my-app'\n});\n\n// Use the logger\nlogger.info('Hello, world!');\nlogger.error('Something went wrong', { error: 'Error details' });\n"})}),"\n",(0,s.jsx)(n.h3,{id:"bunyan-adapter",children:"Bunyan Adapter"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import bunyan from 'bunyan';\nimport { BunyanAdapter } from '@neurallog/sdk/adapters';\n\n// Create Bunyan logger\nconst bunyanLogger = bunyan.createLogger({\n  name: 'my-app'\n});\n\n// Create adapter\nconst logger = new BunyanAdapter({\n  logger: bunyanLogger,\n  logName: 'my-app'\n});\n\n// Use the logger\nlogger.info('Hello, world!');\nlogger.error('Something went wrong', { error: 'Error details' });\n"})}),"\n",(0,s.jsx)(n.h3,{id:"pino-adapter",children:"Pino Adapter"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import pino from 'pino';\nimport { PinoAdapter } from '@neurallog/sdk/adapters';\n\n// Create Pino logger\nconst pinoLogger = pino();\n\n// Create adapter\nconst logger = new PinoAdapter({\n  logger: pinoLogger,\n  logName: 'my-app'\n});\n\n// Use the logger\nlogger.info('Hello, world!');\nlogger.error('Something went wrong', { error: 'Error details' });\n"})}),"\n",(0,s.jsx)(n.h3,{id:"winston-adapter",children:"Winston Adapter"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import winston from 'winston';\nimport { WinstonAdapter } from '@neurallog/sdk/adapters';\n\n// Create Winston logger\nconst winstonLogger = winston.createLogger({\n  transports: [new winston.transports.Console()]\n});\n\n// Create adapter\nconst logger = new WinstonAdapter({\n  logger: winstonLogger,\n  logName: 'my-app'\n});\n\n// Use the logger\nlogger.info('Hello, world!');\nlogger.error('Something went wrong', { error: 'Error details' });\n"})}),"\n",(0,s.jsx)(n.h3,{id:"loglevel-adapter",children:"Loglevel Adapter"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import loglevel from 'loglevel';\nimport { LoglevelAdapter } from '@neurallog/sdk/adapters';\n\n// Create Loglevel logger\nconst loglevelLogger = loglevel.getLogger('my-app');\n\n// Create adapter\nconst logger = new LoglevelAdapter({\n  logger: loglevelLogger,\n  logName: 'my-app'\n});\n\n// Use the logger\nlogger.info('Hello, world!');\nlogger.error('Something went wrong', { error: 'Error details' });\n"})}),"\n",(0,s.jsx)(n.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,s.jsx)(n.h3,{id:"neurallog",children:"NeuralLog"}),"\n",(0,s.jsx)(n.h4,{id:"static-methods",children:"Static Methods"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"configure(options: GlobalOptions): void"})," - Configure global options"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Log(name: string, options?: LoggerOptions): Logger"})," - Create a new logger"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"search(criteria?: SearchCriteria): Promise<LogEntry[]>"})," - Search logs"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"getLogs(limit?: number, serverUrl?: string): Promise<string[]>"})," - Get all log names"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"logger",children:"Logger"}),"\n",(0,s.jsx)(n.h4,{id:"methods",children:"Methods"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"log(level: LogLevel, message: string, data?: Record<string, any>): Promise<Logger>"})," - Log a message at the specified level"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"debug(message: string, data?: Record<string, any>): Promise<Logger>"})," - Log a debug message"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"info(message: string, data?: Record<string, any>): Promise<Logger>"})," - Log an info message"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"warn(message: string, data?: Record<string, any>): Promise<Logger>"})," - Log a warning message"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"error(message: string, data?: Record<string, any>): Promise<Logger>"})," - Log an error message"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"fatal(message: string, data?: Record<string, any>): Promise<Logger>"})," - Log a fatal message"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"clear(): Promise<Logger>"})," - Clear the log"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"get(limit?: number): Promise<LogEntry[]>"})," - Get log entries"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"search(criteria?: SearchCriteria): Promise<LogEntry[]>"})," - Search this log"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"getName(): string"})," - Get the log name"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"shared-types",children:"Shared Types"}),"\n",(0,s.jsxs)(n.p,{children:["The SDK uses the following types from the ",(0,s.jsx)(n.code,{children:"@neurallog/shared"})," package:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"/**\n * Log levels\n */\nexport enum LogLevel {\n  DEBUG = 'debug',\n  INFO = 'info',\n  WARN = 'warn',\n  ERROR = 'error',\n  FATAL = 'fatal'\n}\n\n/**\n * Log entry interface\n */\nexport interface LogEntry {\n  id: string;\n  timestamp: number;\n  data: Record<string, any>;\n}\n\n/**\n * Log response interface\n */\nexport interface LogResponse {\n  status: string;\n  name: string;\n  namespace: string;\n  entries: LogEntry[];\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"publishing-the-sdk",children:"Publishing the SDK"}),"\n",(0,s.jsx)(n.p,{children:"To publish the SDK to the private registry:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:"# Windows (PowerShell)\ncd infra\n./scripts/Publish-SDK.ps1\n"})}),"\n",(0,s.jsx)(n.p,{children:"This script will:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Start Verdaccio if it's not already running"}),"\n",(0,s.jsx)(n.li,{children:"Configure npm to use the private registry for the @neurallog scope"}),"\n",(0,s.jsx)(n.li,{children:"Build the SDK"}),"\n",(0,s.jsx)(n.li,{children:"Publish the SDK to the private registry"}),"\n"]})]})}function c(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>a});var o=r(6540);const s={},l=o.createContext(s);function i(e){const n=o.useContext(l);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(l.Provider,{value:n},e.children)}}}]);